// src/components/auth/LoginForm.tsx
"use client";
import { useState } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useAuth } from '@/hooks/use-auth';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { LogIn, AlertTriangle, ArrowRight } from 'lucide-react';
import { auth } from '@/lib/firebase/config';
import { sendPasswordResetEmail } from 'firebase/auth';
import { useToast } from '@/hooks/use-toast';

const loginSchema = z.object({
  email: z.string().email({ message: "Ungültige E-Mail-Adresse." }),
  password: z.string().min(6, { message: "Passwort muss mindestens 6 Zeichen lang sein." }),
});

type LoginFormInputs = z.infer<typeof loginSchema>;

export function LoginForm() {
  const { signIn, loading, error: authError } = useAuth();
  const [formError, setFormError] = useState<string | null>(null);
  const [showResetForm, setShowResetForm] = useState<boolean>(false);
  const [resetEmail, setResetEmail] = useState<string>('');
  const [isResetting, setIsResetting] = useState<boolean>(false);
  const { toast } = useToast();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginFormInputs>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: ''
    }
  });

  const onSubmit: SubmitHandler<LoginFormInputs> = async (data) => {
    setFormError(null);
    try {
      await signIn(data.email, data.password);
      // Redirect or further actions will be handled by AuthProvider or page logic if needed
    } catch (e) {
      // error is handled by AuthProvider's toast, but can set local form error if needed
      // setFormError((e as Error).message || "Anmeldung fehlgeschlagen.");
    }
  };

  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!resetEmail.trim()) {
      toast({
        title: "E-Mail erforderlich",
        description: "Bitte geben Sie Ihre E-Mail-Adresse ein.",
        variant: "destructive",
      });
      return;
    }

    setIsResetting(true);
    try {
      await sendPasswordResetEmail(auth, resetEmail);
      toast({
        title: "E-Mail gesendet",
        description: "Eine E-Mail mit Anweisungen zum Zurücksetzen Ihres Passworts wurde gesendet.",
      });
      setResetEmail('');
      setShowResetForm(false);
    } catch (error: any) {
      let errorMessage = "Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.";
      
      if (error.code === 'auth/user-not-found') {
        errorMessage = "Es wurde kein Benutzer mit dieser E-Mail-Adresse gefunden.";
      } else if (error.code === 'auth/invalid-email') {
        errorMessage = "Die eingegebene E-Mail-Adresse ist ungültig.";
      }
      
      toast({
        title: "Fehler",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsResetting(false);
    }
  };

  // Sicherstellen, dass resetEmail immer ein String ist
  const handleResetEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setResetEmail(value || '');
  };

  return (
    <div className="flex justify-center items-center py-12">
      <Card className="w-full max-w-md shadow-2xl">
        <CardHeader className="text-center">
          <LogIn className="mx-auto h-12 w-12 text-primary mb-4" />
          <CardTitle className="text-3xl font-bold">
            {showResetForm ? "Passwort zurücksetzen" : "Anmelden"}
          </CardTitle>
          <CardDescription>
            {showResetForm 
              ? "Geben Sie Ihre E-Mail-Adresse ein, um Ihr Passwort zurückzusetzen."
              : "Melden Sie sich an, um auf Ihr Konto zuzugreifen."
            }
          </CardDescription>
        </CardHeader>
        <CardContent>
          {showResetForm ? (
            <form onSubmit={handleResetPassword} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="reset-email">E-Mail</Label>
                <Input
                  id="reset-email"
                  type="email"
                  placeholder="name@beispiel.de"
                  value={resetEmail}
                  onChange={handleResetEmailChange}
                  required
                />
              </div>
              <Button 
                type="submit" 
                className="w-full bg-accent hover:bg-accent/90" 
                disabled={isResetting}
              >
                {isResetting ? "Wird gesendet..." : "Zurücksetzen-Link senden"}
              </Button>
              <Button
                type="button"
                variant="ghost"
                className="w-full flex items-center justify-center"
                onClick={() => setShowResetForm(false)}
              >
                <ArrowRight className="mr-2 h-4 w-4" />
                Zurück zur Anmeldung
              </Button>
            </form>
          ) : (
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email">E-Mail</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="name@beispiel.de"
                  {...register('email')}
                  className={errors.email ? 'border-destructive' : ''}
                  aria-invalid={errors.email ? "true" : "false"}
                />
                {errors.email && <p className="text-sm text-destructive">{errors.email.message}</p>}
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Passwort</Label>
                <Input
                  id="password"
                  type="password"
                  placeholder="********"
                  {...register('password')}
                  className={errors.password ? 'border-destructive' : ''}
                  aria-invalid={errors.password ? "true" : "false"}
                />
                {errors.password && <p className="text-sm text-destructive">{errors.password.message}</p>}
              </div>
              
              <div className="pt-2 text-sm text-muted-foreground">
                (Captcha-Platzhalter - Funktion folgt)
              </div>

              {authError && !formError && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertTitle>Anmeldefehler</AlertTitle>
                  <AlertDescription>
                    {authError.message.includes('auth/invalid-credential') 
                      ? 'Ungültige Anmeldedaten. Bitte überprüfen Sie Ihre E-Mail und Ihr Passwort.'
                      : authError.message}
                  </AlertDescription>
                </Alert>
              )}
              {formError && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertTitle>Fehler</AlertTitle>
                  <AlertDescription>{formError}</AlertDescription>
                </Alert>
              )}
              <Button type="submit" className="w-full bg-accent hover:bg-accent/90" disabled={loading}>
                {loading ? 'Anmelden...' : 'Anmelden'}
              </Button>
            </form>
          )}
        </CardContent>
        <CardFooter className="text-center text-sm">
          {!showResetForm ? (
            <Button
              variant="link"
              className="mx-auto text-sm"
              onClick={() => setShowResetForm(true)}
            >
              Passwort vergessen?
            </Button>
          ) : (
            <p className="text-muted-foreground">
              Geben Sie Ihre E-Mail-Adresse ein, um einen Link zum Zurücksetzen Ihres Passworts zu erhalten.
            </p>
          )}
        </CardFooter>
      </Card>
    </div>
  );
}